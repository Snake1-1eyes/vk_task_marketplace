syntax = "proto3";

package auth;

import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/Snake1-1eyes/marketplace/pkg/api";

service AuthService {
    rpc Login (LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/auth/login"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Авторизация пользователя"
            description: "Авторизует пользователя по логину и паролю, возвращает токен авторизации"
        };
    }

    rpc Register (RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/v1/auth/register"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Регистрация пользователя"
            description: "Регистрирует нового пользователя с указанным логином и паролем"
        };
    }
}

message LoginRequest {
    string username = 1 [(validate.rules).string = {min_len: 3, max_len: 50}];
    string password = 2 [(validate.rules).string = {min_len: 6, max_len: 50}];
}

message LoginResponse {
    string token = 1;
    User user = 2;
}

message RegisterRequest {
    string username = 1 [(validate.rules).string = {min_len: 3, max_len: 50, pattern: "^[a-zA-Z0-9_-]+$"}];
    string password = 2 [(validate.rules).string = {min_len: 6, max_len: 50}];
}

message RegisterResponse {
    User user = 1;
}

message User {
    uint64 id = 1;
    string username = 2;
    string created_at = 3;
}

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Marketplace Auth API";
        version: "1.0.0";
        description: "API для авторизации и регистрации пользователей маркетплейса";
    };
    host: "localhost:8080";
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
};