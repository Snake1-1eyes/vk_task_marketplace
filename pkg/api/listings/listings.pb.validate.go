// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: listings/listings.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateListingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateListingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateListingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateListingRequestMultiError, or nil if none found.
func (m *CreateListingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateListingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 5 || l > 100 {
		err := CreateListingRequestValidationError{
			field:  "Title",
			reason: "value length must be between 5 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 10 || l > 1000 {
		err := CreateListingRequestValidationError{
			field:  "Description",
			reason: "value length must be between 10 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetImageUrl()); err != nil {
		err = CreateListingRequestValidationError{
			field:  "ImageUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CreateListingRequestValidationError{
			field:  "ImageUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPrice() <= 0 {
		err := CreateListingRequestValidationError{
			field:  "Price",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateListingRequestMultiError(errors)
	}

	return nil
}

// CreateListingRequestMultiError is an error wrapping multiple validation
// errors returned by CreateListingRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateListingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateListingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateListingRequestMultiError) AllErrors() []error { return m }

// CreateListingRequestValidationError is the validation error returned by
// CreateListingRequest.Validate if the designated constraints aren't met.
type CreateListingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateListingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateListingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateListingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateListingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateListingRequestValidationError) ErrorName() string {
	return "CreateListingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateListingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateListingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateListingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateListingRequestValidationError{}

// Validate checks the field values on GetListingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListingsRequestMultiError, or nil if none found.
func (m *GetListingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPage(); val <= 0 || val > 100 {
		err := GetListingsRequestValidationError{
			field:  "Page",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPerPage(); val <= 0 || val > 50 {
		err := GetListingsRequestValidationError{
			field:  "PerPage",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SortBy

	// no validation rules for SortOrder

	if m.MinPrice != nil {

		if m.GetMinPrice() < 0 {
			err := GetListingsRequestValidationError{
				field:  "MinPrice",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.MaxPrice != nil {

		if m.GetMaxPrice() <= 0 {
			err := GetListingsRequestValidationError{
				field:  "MaxPrice",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetListingsRequestMultiError(errors)
	}

	return nil
}

// GetListingsRequestMultiError is an error wrapping multiple validation errors
// returned by GetListingsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetListingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListingsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListingsRequestMultiError) AllErrors() []error { return m }

// GetListingsRequestValidationError is the validation error returned by
// GetListingsRequest.Validate if the designated constraints aren't met.
type GetListingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListingsRequestValidationError) ErrorName() string {
	return "GetListingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListingsRequestValidationError{}

// Validate checks the field values on ListingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListingResponseMultiError, or nil if none found.
func (m *ListingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for ImageUrl

	// no validation rules for Price

	// no validation rules for AuthorUsername

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListingResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListingResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListingResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsOwner

	if len(errors) > 0 {
		return ListingResponseMultiError(errors)
	}

	return nil
}

// ListingResponseMultiError is an error wrapping multiple validation errors
// returned by ListingResponse.ValidateAll() if the designated constraints
// aren't met.
type ListingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListingResponseMultiError) AllErrors() []error { return m }

// ListingResponseValidationError is the validation error returned by
// ListingResponse.Validate if the designated constraints aren't met.
type ListingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListingResponseValidationError) ErrorName() string { return "ListingResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListingResponseValidationError{}

// Validate checks the field values on ListingsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListingsResponseMultiError, or nil if none found.
func (m *ListingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetListings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListingsResponseValidationError{
						field:  fmt.Sprintf("Listings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListingsResponseValidationError{
						field:  fmt.Sprintf("Listings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListingsResponseValidationError{
					field:  fmt.Sprintf("Listings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PerPage

	// no validation rules for TotalPages

	if len(errors) > 0 {
		return ListingsResponseMultiError(errors)
	}

	return nil
}

// ListingsResponseMultiError is an error wrapping multiple validation errors
// returned by ListingsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListingsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListingsResponseMultiError) AllErrors() []error { return m }

// ListingsResponseValidationError is the validation error returned by
// ListingsResponse.Validate if the designated constraints aren't met.
type ListingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListingsResponseValidationError) ErrorName() string { return "ListingsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListingsResponseValidationError{}
