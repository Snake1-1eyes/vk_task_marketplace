// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: listings/listings.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ListingsService_CreateListing_FullMethodName = "/listings.ListingsService/CreateListing"
	ListingsService_GetListings_FullMethodName   = "/listings.ListingsService/GetListings"
)

// ListingsServiceClient is the client API for ListingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListingsServiceClient interface {
	// Создание нового объявления
	CreateListing(ctx context.Context, in *CreateListingRequest, opts ...grpc.CallOption) (*ListingResponse, error)
	// Получение ленты объявлений
	GetListings(ctx context.Context, in *GetListingsRequest, opts ...grpc.CallOption) (*ListingsResponse, error)
}

type listingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListingsServiceClient(cc grpc.ClientConnInterface) ListingsServiceClient {
	return &listingsServiceClient{cc}
}

func (c *listingsServiceClient) CreateListing(ctx context.Context, in *CreateListingRequest, opts ...grpc.CallOption) (*ListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListingResponse)
	err := c.cc.Invoke(ctx, ListingsService_CreateListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingsServiceClient) GetListings(ctx context.Context, in *GetListingsRequest, opts ...grpc.CallOption) (*ListingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListingsResponse)
	err := c.cc.Invoke(ctx, ListingsService_GetListings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListingsServiceServer is the server API for ListingsService service.
// All implementations must embed UnimplementedListingsServiceServer
// for forward compatibility.
type ListingsServiceServer interface {
	// Создание нового объявления
	CreateListing(context.Context, *CreateListingRequest) (*ListingResponse, error)
	// Получение ленты объявлений
	GetListings(context.Context, *GetListingsRequest) (*ListingsResponse, error)
	mustEmbedUnimplementedListingsServiceServer()
}

// UnimplementedListingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListingsServiceServer struct{}

func (UnimplementedListingsServiceServer) CreateListing(context.Context, *CreateListingRequest) (*ListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateListing not implemented")
}
func (UnimplementedListingsServiceServer) GetListings(context.Context, *GetListingsRequest) (*ListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListings not implemented")
}
func (UnimplementedListingsServiceServer) mustEmbedUnimplementedListingsServiceServer() {}
func (UnimplementedListingsServiceServer) testEmbeddedByValue()                         {}

// UnsafeListingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListingsServiceServer will
// result in compilation errors.
type UnsafeListingsServiceServer interface {
	mustEmbedUnimplementedListingsServiceServer()
}

func RegisterListingsServiceServer(s grpc.ServiceRegistrar, srv ListingsServiceServer) {
	// If the following call pancis, it indicates UnimplementedListingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListingsService_ServiceDesc, srv)
}

func _ListingsService_CreateListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingsServiceServer).CreateListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingsService_CreateListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingsServiceServer).CreateListing(ctx, req.(*CreateListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingsService_GetListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingsServiceServer).GetListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingsService_GetListings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingsServiceServer).GetListings(ctx, req.(*GetListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListingsService_ServiceDesc is the grpc.ServiceDesc for ListingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "listings.ListingsService",
	HandlerType: (*ListingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateListing",
			Handler:    _ListingsService_CreateListing_Handler,
		},
		{
			MethodName: "GetListings",
			Handler:    _ListingsService_GetListings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "listings/listings.proto",
}
